/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/fuOSwiWdpXi
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/
'use client';
import { Button } from '@/components/ui/button';
import { ColumnDef } from '@tanstack/table-core';
import { ArrowUpDown } from 'lucide-react';
import React, { useState, useEffect, createContext} from 'react';
import { SidebarComponent} from "./components/sidebar"
import {TableComponent} from "./components/table"
import Link from "next/link"


export const userContext        = createContext({});
export const tableContext       = createContext({});;
export const handleClickContext = createContext({});
export const columnsContext     = createContext({});

export default function listado() {
  const [showElements, setShowElements] = useState<boolean>(true); // Estado para controlar la visibilidad
  const [data, setData] = useState<any[]>([]);


  const handleClick = async () => {
    setShowElements(!showElements)
    console.log(showElements)
  };

  type Character = {
    id: number;
    name: string;
    species: string;
    type: string;
    gender: string;
    image: string;
  }

  const columns: ColumnDef<Character>[] = [
    {
      accessorKey: "id",
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          >
            id
            <ArrowUpDown className="ml-2 h-4 w-4" />
          </Button>
        )
      },
      cell: ({ row }) => <div className="lowercase">{row.getValue("id")}</div>,
    },
    {
      accessorKey: "name",
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          >
            name
            <ArrowUpDown className="ml-2 h-4 w-4" />
          </Button>
        )
      },
      cell: ({ row }) => <Link href={"consultar?id="+row.getValue("id")}>
        <div className="text-blue-500 font-bold hover:underline">
          {row.getValue("name")}
        </div>
    </Link>
    
    ,
    },
  
    {
      accessorKey: "species",
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          >
            species
            <ArrowUpDown className="ml-2 h-4 w-4" />
          </Button>
        )
      },
      cell: ({ row }) => <div className="lowercase">{row.getValue("species")}</div>,
    },
  
    {
      accessorKey: "gender",
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          >
            gender
            <ArrowUpDown className="ml-2 h-4 w-4" />
          </Button>
        )
      },
      cell: ({ row }) => <div className="lowercase">{row.getValue("gender")}</div>,
    },
  
    
    {
      accessorKey: "type",
      header: ({ column }) => {
        return (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === "asc")}
          >
            type
            <ArrowUpDown className="ml-2 h-4 w-4" />
          </Button>
        )
      },
      cell: ({ row }) => <div className="lowercase">{row.getValue("type")}</div>,
    },
  
  /*
    {
      id: "actions",
      enableHiding: false,
      cell: ({ row }) => {
        const payment = row.original
  
        return (
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <DropdownMenuItem
                onClick={() => navigator.clipboard.writeText(payment.id)}
              >
                Copy payment ID
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem>View customer</DropdownMenuItem>
              <DropdownMenuItem>View payment details</DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        )
      },
    },*/
  ]
  
  useEffect(() => {
    const fetchCharacters = async () => {
      const dataSaved = localStorage.getItem("characters");
      console.log(dataSaved)
      if(dataSaved==null){
        const response = await fetch('https://rickandmortyapi.com/api/character');
        const data = await response.json();
        const first20Characters = data.results;

        const response2 = await fetch('https://rickandmortyapi.com/api/character?page=2');
        const data2 = await response2.json();
        const first20Characters2 = data2.results;

        const response3 = await fetch('https://rickandmortyapi.com/api/character?page=3');
        const data3 = await response3.json();
        const first20Characters3 = data3.results;

        const charactersNew = Array.from([...first20Characters, ...first20Characters2, ...first20Characters3]);

        localStorage.setItem('characters', JSON.stringify(charactersNew)); // Guardar en LocalStorage

        setData(charactersNew);
      }

      else  setData(JSON.parse(localStorage.getItem("characters")));

      
    };

    fetchCharacters();

  }, []);

  return (
    <div className="flex h-screen bg-gray-200 dark:bg-gray-900">
      <userContext.Provider value={showElements}>
        <handleClickContext.Provider value={handleClick}>
          <SidebarComponent />
        </handleClickContext.Provider>
      </userContext.Provider> 

      <tableContext.Provider value={data}>
          <userContext.Provider value={showElements}>
          <columnsContext.Provider value={columns}>
              <TableComponent />
            </columnsContext.Provider>
          </userContext.Provider> 
      </tableContext.Provider> 


      <div className=" st-2 st-sticky-share-buttons st-left st-toggleable st-has-labels hidden ">
          <a className="st-btn st-first m-auto" data-network="whatsapp" href="#">
          <svg
          className="h-5 w-5 text-gray-500 dark:text-gray-400  m-auto "
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >
        <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
        <circle cx="9" cy="7" r="4" />
        <path d="M22 21v-2a4 4 0 0 0-3-3.87" />
        <path d="M16 3.13a4 4 0 0 1 0 7.75" />
      </svg>
            <div className="st-label">Characters</div>
          </a>

          <a className="st-btn m-auto" data-network="whatsapp" href="#">
          <svg
          className="h-5 w-5 text-gray-500 dark:text-gray-400  m-auto "
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      >

      <g fill="none" fillRule="evenodd" stroke="#000000" strokeLinecap="round" strokeLinejoin="round" transform="translate(1 4)"/>

      <path d="m13.5 12.5v-6c0-1.1045695-.8954305-2-2-2h-9c-1.1045695 0-2 .8954305-2 2v6c0 1.1045695.8954305 2 2 2h9c1.1045695 0 2-.8954305 2-2z"/>

      <path d="m15.5 12.5v-6.99481259c0-1.65685425-1.3431458-3-3-3-.0017276 0-.0034553 0-.0051829 0l-8.9948171.01554432"/>

      <path d="m17.5 10.5v-5.99308345c0-2.209139-1.790861-4-4-4-.0023035 0-.004607 0-.0069106 0l-7.9930894.01381519"/>      </svg>
            <div className="st-label">Episodes</div>
          </a>
      </div>


  


  </div>)}









